version: "3.9"

x-healthcheck-settings: &healthcheck-settings 
  interval: 10s
  retries: 10
  start_period: 15s
  timeout: 5s

x-db-env-conf: &db-env
  DATABASE_NAME: ${DATABASE_NAME}
  DATABASE_USERNAME: ${PSQL_USER}
  DATABASE_PASSWORD: ${PSQL_PASSWORD}
  DATABASE_ENDPOINT: postgres
  DATABASE_PORT: 5432

x-liquibase-settings: &liquibase-setting
  pull_policy: ${PULL_POLICY}
  volumes:
    - ./liquibase/liquibase-setup.sh:/liquibase-setup.sh
  command: chmod +x /liquibase-setup.sh
  entrypoint: /liquibase-setup.sh
  networks:
    - callisto
  depends_on:
    postgres:
      condition: service_healthy

x-certificate-creation: &certificate-creation
  pull_policy: ${PULL_POLICY}
  image: eclipse-temurin:17-jre-focal
  volumes:
    - ./kafka:/kafka
    - keystore:/keystore
  working_dir: /kafka
  entrypoint: ["/kafka/create_keystore.sh"]

services:
  postgres:
    image: postgres:13.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${PSQL_PASSWORD}
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - ./sql:/docker-entrypoint-initdb.d # This volume store sql files that are executed automaticallyby Postgres.
    networks:
      - callisto
    healthcheck:
      test: ["CMD", "psql", "-U", "${PSQL_USER}", "-d", "${DATABASE_NAME}"]
      interval: 500ms
      timeout: 1s
      retries: 5

  kafka-setup:
    <<: *certificate-creation
    command: ["kafka"]

  kafka:
    image: bitnami/kafka:3.3
    ports:
      - '9093'
      - '9094'
    volumes:
      - keystore:/keystore
      # Required to trick start script to allow the configuration. Keystore needs to be present in init
      # script but the real keystore isn't created until kafka-setup. This places and empty file
      # in the expected location and the environment variable KAFKA_CFG_SSL_KEYSTORE_LOCATION
      # points to the real keystore when the kafka server is started
      - ./kafka/kafka.keystore.jks:/bitnami/kafka/config/certs/kafka.keystore.jks 
      - ./kafka/healthcheck.properties:/bitnami/kafka/config/healthcheck.properties
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093,CONTROLLER://:9092,SSL://:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,SSL://kafka:9094
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9092
      ALLOW_PLAINTEXT_LISTENER: yes

      KAFKA_TLS_TRUSTSTORE_FILE: /keystore/kafka/kafka.truststore.jks
      KAFKA_CERTIFICATE_PASSWORD: changeit
      KAFKA_CFG_SSL_KEYSTORE_LOCATION: /keystore/kafka/kafka.keystore.jks
      KAFKA_CFG_SSL_KEYSTORE_PASSWORD: changeit

      KAFKA_CFG_SUPER_USERS: 'User:C=GB,O=UK Home Office,CN=Callisto kafka'
    healthcheck:
      <<: *healthcheck-settings
      test: kafka-topics.sh --bootstrap-server kafka:9094 --list --command-config /bitnami/kafka/config/healthcheck.properties || exit 1
    depends_on:
      kafka-setup:
        condition: service_completed_successfully

  kafka-producer-setup:
    <<: *certificate-creation
    command: ["kafka-producer"]

  kafka-producer:
    pull_policy: ${PULL_POLICY}
    image: confluentinc/cp-kafka:7.3.0
    volumes:
      - ./kafka:/kafka
      - keystore:/etc/kafka/secrets/keystore
    entrypoint: ["sleep", "1h"]
    depends_on:
      kafka:
        condition: service_healthy
      kafka-producer-setup:
        condition: service_completed_successfully

  kafka-consumer-setup:
    <<: *certificate-creation
    command: ["kafka-consumer"]

  kafka-consumer:
    pull_policy: ${PULL_POLICY}
    image: confluentinc/cp-kafka:7.3.0
    volumes:
      - ./kafka:/kafka
      - keystore:/etc/kafka/secrets/keystore
    entrypoint: ["sleep", "1h"]
    depends_on:
      kafka:
        condition: service_healthy
      kafka-consumer-setup:
        condition: service_completed_successfully

  ingress:
    image: nginx:1.19.2-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./ingress/default.conf:/etc/nginx/conf.d/default.conf
      - ./ingress/nginx-selfsigned.crt:/etc/ssl/certs/nginx-selfsigned.crt:ro
      - ./ingress/nginx-selfsigned.key:/etc/ssl/private/nginx-selfsigned.key:ro
    networks:
      - callisto
    healthcheck:
      <<: *healthcheck-settings
      test: 'nc -z ingress 443 || exit -1'

  keycloak:
    image: "340268328991.dkr.ecr.eu-west-2.amazonaws.com/callisto/auth-keycloak:$KEYCLOAK_TAG"
    pull_policy: ${PULL_POLICY}
    environment:
      - DB_VENDOR=h2
      - PROXY_ADDRESS_FORWARDING=true
    healthcheck:
      <<: *healthcheck-settings
      test: ['CMD', 'curl', '-f', 'http://keycloak:9090/auth']
    command:
      - "-Djboss.http.port=9090"
    ports:
      - "50000:9090"
    networks:
      - callisto

  web:
    image: "340268328991.dkr.ecr.eu-west-2.amazonaws.com/callisto/ui:$WEB_TAG"
    pull_policy: ${PULL_POLICY}
    ports:
      - "50001:9090"
    networks:
      - callisto
    healthcheck:
      <<: *healthcheck-settings
      test: ['CMD', 'curl', '-f', 'http://web:9090/index.html']


  timecard-database-migrations:
    <<: *liquibase-setting
    image: "340268328991.dkr.ecr.eu-west-2.amazonaws.com/callisto/timecard-database:$TIMECARD_RESTAPI_TAG"
    environment:
      databaseSchemaName: timecard
      <<: *db-env

  timecard-restapi:
    image: "340268328991.dkr.ecr.eu-west-2.amazonaws.com/callisto/timecard-restapi:$TIMECARD_RESTAPI_TAG"
    environment:
      <<: *db-env
    ports:
      - "50100:9090"
    depends_on:
      timecard-database-migrations:
        condition: service_completed_successfully
    healthcheck:
      <<: *healthcheck-settings
      test: wget --no-verbose --tries=1 --spider http://timecard-restapi:9090/swagger-ui/index.html || exit 1
    networks:
      - callisto

  accruals-restapi:
    image: "340268328991.dkr.ecr.eu-west-2.amazonaws.com/callisto/accruals-restapi:$ACCRUALS_RESTAPI_TAG"
    environment:
      <<: *db-env
    command:
      - "--server.port=9090" # Having to override server port as application.properties is setting it to a different port
    ports:
      - "50200:9090"
    healthcheck:
      <<: *healthcheck-settings
      test: wget --no-verbose --tries=1 --spider http://timecard-restapi:9090/swagger-ui/index.html || exit 1
    networks:
      - callisto

networks:
  callisto:
    driver: bridge

volumes:
  keystore:
    driver: local
