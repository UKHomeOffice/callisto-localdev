    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    
    server {
        listen 80;
        server_name  ~^(?<subdomain>.+).callisto.localhost$ ;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {

        # set DNS resolver as Docker internal DNS
        resolver 127.0.0.11 valid=1s;
        resolver_timeout 5s; 
                
        listen 443 ssl;
        server_name  ~^(?<subdomain>.+).callisto.localhost$ ;

        location / {

            if ($request_method = 'OPTIONS') {
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                add_header 'Access-Control-Allow-Origin' 'https://web.callisto.localhost' always;
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' '*' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                return 204;
            }

            if ($subdomain != 'keycloak') {
                add_header 'Access-Control-Allow-Origin' 'https://web.callisto.localhost' always;
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            set $full_uri '$host$request_uri';
            set $upstream_request_uri $request_uri;

            if ($full_uri ~* "web.callisto.localhost/(?!(src/|@|node_modules/|static/|assets/|silent-check-sso))") {
                set $upstream_request_uri /;
            }
            
            add_header 'Access-Control-Allow-Methods' '*' always;
            add_header 'Access-Control-Allow-Headers' '*' always;

            proxy_pass         http://$subdomain:9090$upstream_request_uri;
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   Upgrade $http_upgrade;
            #proxy_set_header   Connection keep-alive;
            # Connection "upgrade" is used in combination with websockets (needed for vite)
            proxy_set_header    Connection "upgrade"; 
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   X-Forwarded-Host $host;
            proxy_buffer_size           128k;
            proxy_buffers               4 256k;
            proxy_busy_buffers_size     256k;
        }
    }
